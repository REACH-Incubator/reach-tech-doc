module UInt256

  use int.Int

  type uint256 = < range 0 0xffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff >

  let constant max_uint256 : int = 0xffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff
  let constant length : int = 256
  let constant radix : int = max_uint256 + 1
  function to_int (x : uint256) : int = uint256'int x

  clone export mach.int.Unsigned with
    type t = uint256,
    constant max = uint256'maxInt,
    constant radix = radix,
    goal radix_def,
    function to_int = uint256'int,
    axiom zero_unsigned_is_zero,
    axiom to_int_in_bounds,
    axiom extensionality

end

module Default

       val function default : 'a

       axiom Default_bool: (default : bool) = false
    
       use UInt256  
       axiom Zero: (default: uint256) = 0

end

module Address
       type address

       val equal (a:address) (b:address): bool
          ensures { result = (a = b) }

       use Default

       axiom non_default: exists d:address. d <> default

end

module Message

       use Address
       use Default

       type msg = private {
            mutable sender: address
       }
       invariant { sender <> default }

       val msg: msg

       use UInt256
       val now: uint256

end

module Mapping

       use map.Map as Map
       type mapping 'a 'b = {
         mutable data: Map.map 'a 'b;
       }

      use Default
      axiom Default_mapping: (default: mapping 'a 'b).data = (fun (_:'a) -> (default:'b))
      
      val ghost init () : mapping 'a 'b
        ensures { result = default }

       val create () : mapping 'a 'b
         ensures { result = default }
       val set (m:mapping 'a 'b) (a:'a) (b:'b) : unit
           writes { m }
           ensures { m.data = Map.set (old m.data) a b }
       val ([]<-) (m:mapping 'a 'b) (a:'a) (b:'b) : unit
           writes { m }
           ensures { m.data = Map.set (old m.data) a b }

       function get (m:mapping 'a 'b) (a:'a) : 'b =
            Map.get m.data a
       val get (m:mapping 'a 'b) (a:'a) : 'b
           ensures { result = get m a }

       val function ([]) (m:mapping 'a 'b) (a:'a) : 'b
           ensures { result = get m a }

       function mem (i:'a) (a:mapping 'a 'b): bool =
         (Map.get a.data i) <> default

end

module Require

    exception RequireFailed string
    let require b s
      raises { RequireFailed s' -> not b /\ s = s' }
      ensures { b }
     =
      if not b then raise (RequireFailed s)

end

module Sum

       use int.Int
       use UInt256
       use map.Map
       use Mapping
       use Default

       function sum (m: mapping 'a uint256) : int

       axiom Mod: forall m:mapping 'a uint256. forall k v. sum m = sum { data = set m.data k v } - v + get m k


       axiom Init: sum (default : mapping 'a uint256) = 0

end

module T1

    use bool.Bool
    use UInt256
    use Address
    use Message
    use Mapping
    use Require

    type t = {
         balances : mapping address uint256;
    }

    val t:t

    let transfer receiver numTokens =
       t.balances[msg.sender] <- t.balances[msg.sender] - numTokens;
       t.balances[receiver] <- t.balances[receiver] + numTokens

end

module T2

    use bool.Bool
    use int.Int
    use UInt256
    use Address
    use Message
    use Mapping
    use Require

    type t = {
         balances : mapping address uint256;
    }

    val t:t

    let transfer receiver numTokens
      raises { RequireFailed _ -> t.balances[msg.sender] < numTokens }
    =
       require(numTokens <= t.balances[msg.sender]) "Not enough token for source";
       t.balances[msg.sender] <- t.balances[msg.sender] - numTokens;
       t.balances[receiver] <- t.balances[receiver] + numTokens

end

module T3

    use bool.Bool
    use int.Int
    use UInt256
    use Address
    use Message
    use Mapping
    use Require

    type t = {
         balances : mapping address uint256;
    }

    val t:t

    let function uint256_max: uint256 =
            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

    let transfer receiver numTokens
      raises { RequireFailed _ -> t.balances[msg.sender] < numTokens \/
                                  uint256_max < t.balances[receiver] + numTokens }
       =
       require(numTokens <= t.balances[msg.sender]) "Not enough token for source";
       require(t.balances[receiver] <= uint256_max - numTokens) "Too many token for destination";
       t.balances[msg.sender] <- t.balances[msg.sender] - numTokens;
       t.balances[receiver] <- t.balances[receiver] + numTokens

end

module T4

    use bool.Bool
    use int.Int
    use UInt256
    use Address
    use Message
    use Default
    use Mapping
    use Require
    use Sum

    type t = {
         balances : mapping address uint256;
         ghost initial : int;
    }
    invariant { sum balances = initial }
    by {
      initial = 0;
      balances = init ();
    }

    val t:t

    let function uint256_max: uint256 =
            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

    let transfer receiver numTokens
       raises { RequireFailed _ -> t.balances[msg.sender] < numTokens \/
                                   uint256_max < t.balances[receiver] + numTokens }
       =
       require(numTokens <= t.balances[msg.sender]) "Not enough token for source";
       require(t.balances[receiver] <= uint256_max - numTokens) "Too many token for destination";
       t.balances[msg.sender] <- t.balances[msg.sender] - numTokens;
       t.balances[receiver] <- t.balances[receiver] + numTokens

end
